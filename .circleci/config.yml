version: 2.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Deleting Stacks: <<parameters.workflow_id>> "
            aws cloudformation delete-stack --stack-name udapeople-backend-stack-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-prod-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-stack-<<parameters.workflow_id>>
            exit 1           
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
            npm run lint
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm i
             npm run build
             npm run lint
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm i
            npm run test
          
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Back-end
          command: |
            cd backend
            npm i
            npm run test
            
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-Project4-backend \
              --stack-name "udapeople-backend-stack-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID=""  
              exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-Project4-frontend \
              --stack-name "udapeople-frontend-stack-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID=""  
              exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_GET_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-prod-${CIRCLE_WORKFLOW_ID}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "http://$BACKEND_GET_IP:3030" >> .circleci/outputs/backend_url.txt
            echo "[all]" >> .circleci/ansible/inventory.txt
            echo "$BACKEND_GET_IP" >> .circleci/ansible/inventory.txt
            exit 1
            cat .circleci/outputs/backend_url.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/outputs/backend_url.txt
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: "{CIRCLE_WORKFLOW_ID}"

workflows:
  default:
    jobs:
      - deploy-infrastructure

